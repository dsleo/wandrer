name: Strava Workflow
on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  repository_dispatch:
    types: ['strava']
    inputs:
      issue_number:
        required: true
        type: integer
jobs:
  strava:
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      pull-requests: write
      issues: write
    env:
      STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
      STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
      STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_PERSONAL_ACCESS_TOKEN }}
      STRAVA_ACCESS_TOKEN: ${{ secrets.GITHUB_ENV['STRAVA_ACCESS_TOKEN'] }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Download jq binary
        run: |
            mkdir -p ~/.local/bin && \
            curl -LO https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && \
            mv jq-linux64 ~/.local/bin/jq && \
            chmod +x ~/.local/bin/jq
      - name: Set PATH for jq
        run: export PATH=~/.local/bin:"$PATH"
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Authenticate with Strava
        id: auth
        run: |
          AUTHORIZATION="$(printf "%s:%s" "$STRAVA_CLIENT_ID" "$STRAVA_CLIENT_SECRET" | base64)"
          RESPONSE=$(curl --silent --show-error -w "\n%{http_code}\n" \
                -X POST -H "Authorization: Basic $AUTHORIZATION" \
                -H "Content-Type: application/json" \
                -d '{"client_id": "'"${STRAVA_CLIENT_ID}"'", "client_secret": "'"${STRAVA_CLIENT_SECRET}"'", "refresh_token": "'"${STRAVA_REFRESH_TOKEN}"'", "grant_type": "refresh_token" }' \
                https://www.strava.com/api/v3/oauth/token)

          JSON_PAYLOAD=$(echo "${RESPONSE}" | head -n -1)
          STRAVA_ACCESS_TOKEN=$(echo "${JSON_PAYLOAD}" | jq -r '.access_token')
          http_code=$(echo "${RESPONSE}" | tail -n 1)

          if [[ ${http_code} -ne 200 ]]; then
              echo "::error ::Failed to authenticate with Strava API (HTTP status code: ${http_code})"
              exit 1
          fi

          echo "STRAVA_ACCESS_TOKEN=${STRAVA_ACCESS_TOKEN}" >> "${GITHUB_ENV}"
          echo "Access Token: ${STRAVA_ACCESS_TOKEN}"
      - name: Fetch Latest Activity
        id: fetch
        run: |
          response=$(
                  curl \
                    --silent \
                    --show-error \
                    --write "<stdout>" "\n%{http_code}\n" \
                    --header "Authorization: Bearer ${{ secrets.STRAVA_ACCESS_TOKEN }}" \
                    --header "Content-Type: application/json" \
                    --data '{"message":"Retrieved the latest Strava activity","issue_number":null}' \
                    "https://www.strava.com/api/v3/athlete/activities?per_page=1"
                )
                
          # Get the HTTP status code and response body
          http_status_code=$(tail -n 1 <<< "${response}")
          response_body=$(sed '$ d' <<< "${response}")
    
          echo "##[debug][HTTP Status Code]: ${http_status_code}"
          echo "##[debug][Response Body]: ${response_body}"
    
          # Check if the response indicates success
          if [[ "${http_status_code}" == @(200|201) ]]; then
            # Parse the activity ID from the JSON response
            activity_id=$(echo "${response_body}" | jq '.[] | .id // null') || true
            
            # Store the activity ID as an output variable
            echo "::set-output name=activity_id::$(printf '%s' "${activity_id:-null}")"
          else
            # Report an error if the response indicated failure
            echo "::error ::The action failed with HTTP status code ${http_status_code}. Please review the response body below."
            echo "##[debug][Response Body]: ${response_body}"
            exit 1
          fi
      - name: Post Comment to PR
        if: always()
        uses: actions/github-script@v5
        with:
          script: |
            const issueNumber = ${{ github.event.inputs.issue_number }}
            const activityUrl = "<https://www.strava.com/activities/" + ${{ steps.fetch.outputs.activity_id }} + ">"
            const commentBody = "Updated Strava activity description with 'Good job!' message. View the updated activity here: " + activityUrl
            await github.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
